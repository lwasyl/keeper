{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udd45 Keeper \u00b6 A Gradle plugin that infers Proguard/R8 keep rules for androidTest sources. Keeper hooks into R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because the Android Gradle Plugin (AGP) does not currently factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is (really) useful only if you run your instrumentation tests against your minified release builds! If you don\u2019t run these tests against minified builds, then you don\u2019t need this plugin. The build type that you test against is controlled by the testBuildType flag, which is set to debug by default. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . Note: Keeper uses private APIs from AGP and could break between releases. It is currently tested against AGP version 7.0.0 and 7.1.0-alpha05 (or whatever ci_agp_version env vars are described here . Installation \u00b6 Keeper is distributed via Maven Central. Apply the keeper Gradle plugin in your application\u2019s build.gradle. Keeper requires Gradle 7.0 or higher. Keeper can be consumed via regular gradle plugins {} block. plugins { id ( \"com.slack.keeper\" ) version \"x.y.z\" } Note that we still publish to Maven Central, so you would need to add it to the repositories list in settings.gradle . pluginsManagement { repositories { mavenCentral() // woo-hoo! gradlePluginPortal() // there by default } } Alternatively, it can be consumed via manual buildscript dependency + plugin application. buildscript { dependencies { // ... classpath \"com.slack.keeper:keeper:x.y.z\" } } apply plugin: \"com.android.application\" // <- Keeper only works with com.android.application! apply plugin: \"com.slack.keeper\" Note that Keeper must be applied after the Android gradle plugin. Optional configuration options can be found on the Configuration page . As of 0.11.0, Keeper requires at least AGP 7.0.0. Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Under the hood \u00b6 The general logic flow: Create a custom r8 configuration for the R8 dependency. Register two jar tasks per androidTest variant. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided JavaCompile tasks and KotlinCompile tasks if available. Register a infer${androidTestVariant}UsageForKeeper task that plugs the two aforementioned jars into R8\u2019s PrintUses CLI and outputs the inferred proguard rules into a new intermediate .pro file. Finally - the generated file is wired in to R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn ) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in our Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds. Core Library Desugaring (L8) Support \u00b6 Library Desugaring (L8) was introduced in Android Gradle Plugin 4.0. To make this work, the R8 task will generate proguard rules indicating which j$ types are used in source, which the L8DexDesugarLibTask then uses to know which desugared APIs to keep. This approach can have flaws at runtime though, as the classpath of the test APK may not have the right j$ classes available on its classpath to run app code it is invoking. To work around this, Keeper does two things: Keeper merges generated L8 rules from both the androidTest and target app to ensure they cover all used APIs. These merged rules are given to the target app L8DexDesugarLibTask . L8 will still, by default, generate a dex file of backported APIs into both the test app and target app, which can cause confusing runtime classpath issues due to L8 generating different implementations in each app. Keeper works around this by forcing the use of a single dex file in the target app and preventing the inclusion of a backport dex file in the test app. This L8 support is automatically enabled if android.compileOptions.coreLibraryDesugaringEnabled is true in AGP. License \u00b6 Copyright (C) 2020 Slack Technologies, LLC Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#keeper","text":"A Gradle plugin that infers Proguard/R8 keep rules for androidTest sources. Keeper hooks into R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because the Android Gradle Plugin (AGP) does not currently factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is (really) useful only if you run your instrumentation tests against your minified release builds! If you don\u2019t run these tests against minified builds, then you don\u2019t need this plugin. The build type that you test against is controlled by the testBuildType flag, which is set to debug by default. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . Note: Keeper uses private APIs from AGP and could break between releases. It is currently tested against AGP version 7.0.0 and 7.1.0-alpha05 (or whatever ci_agp_version env vars are described here .","title":"\ud83e\udd45 Keeper"},{"location":"#installation","text":"Keeper is distributed via Maven Central. Apply the keeper Gradle plugin in your application\u2019s build.gradle. Keeper requires Gradle 7.0 or higher. Keeper can be consumed via regular gradle plugins {} block. plugins { id ( \"com.slack.keeper\" ) version \"x.y.z\" } Note that we still publish to Maven Central, so you would need to add it to the repositories list in settings.gradle . pluginsManagement { repositories { mavenCentral() // woo-hoo! gradlePluginPortal() // there by default } } Alternatively, it can be consumed via manual buildscript dependency + plugin application. buildscript { dependencies { // ... classpath \"com.slack.keeper:keeper:x.y.z\" } } apply plugin: \"com.android.application\" // <- Keeper only works with com.android.application! apply plugin: \"com.slack.keeper\" Note that Keeper must be applied after the Android gradle plugin. Optional configuration options can be found on the Configuration page . As of 0.11.0, Keeper requires at least AGP 7.0.0. Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Installation"},{"location":"#under-the-hood","text":"The general logic flow: Create a custom r8 configuration for the R8 dependency. Register two jar tasks per androidTest variant. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided JavaCompile tasks and KotlinCompile tasks if available. Register a infer${androidTestVariant}UsageForKeeper task that plugs the two aforementioned jars into R8\u2019s PrintUses CLI and outputs the inferred proguard rules into a new intermediate .pro file. Finally - the generated file is wired in to R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn ) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in our Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds.","title":"Under the hood"},{"location":"#core-library-desugaring-l8-support","text":"Library Desugaring (L8) was introduced in Android Gradle Plugin 4.0. To make this work, the R8 task will generate proguard rules indicating which j$ types are used in source, which the L8DexDesugarLibTask then uses to know which desugared APIs to keep. This approach can have flaws at runtime though, as the classpath of the test APK may not have the right j$ classes available on its classpath to run app code it is invoking. To work around this, Keeper does two things: Keeper merges generated L8 rules from both the androidTest and target app to ensure they cover all used APIs. These merged rules are given to the target app L8DexDesugarLibTask . L8 will still, by default, generate a dex file of backported APIs into both the test app and target app, which can cause confusing runtime classpath issues due to L8 generating different implementations in each app. Keeper works around this by forcing the use of a single dex file in the target app and preventing the inclusion of a backport dex file in the test app. This L8 support is automatically enabled if android.compileOptions.coreLibraryDesugaringEnabled is true in AGP.","title":"Core Library Desugaring (L8) Support"},{"location":"#license","text":"Copyright (C) 2020 Slack Technologies, LLC Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 0.11.2 \u00b6 2022-01-27 Fix: Fix a configuration caching issue when L8 rule sharing is enabled. 0.11.1 \u00b6 2021-08-31 Fix: Keeper\u2019s intermediate jar creation tasks previously accepted dependencies inputs based on content only. This caused build caching issues across multiple machines with Gradle remote cache enabled because it would then attempt to use the previous build\u2019s absolute path to those dependency jars and subsequently fail. This is now fixed by reworking this logic internally a bit and using absolute path sensitivity for that input. This should ensure that caching still works like before across the same machine/paths but will properly be out of date when the absolute paths change across different machines. 0.11.0 \u00b6 2021-07-29 Minimum supported AGP version is now 7.0.0 . It may work on older versions but YMMV. Update embedded ZipFlinger to 7.0.0 and update to its new Path constructors. Update to Kotlin 1.5.21 0.10.0 \u00b6 2021-06-09 Core Library Desugaring is now fully supported. See its section in on the project site for more details! The keeper.enableL8RuleSharing Gradle API is now deprecated and does nothing. L8 support is automatically enabled if android.compileOptions.coreLibraryDesugaringEnabled is true in AGP. 0.9.0 \u00b6 2021-05-20 New: Support for Gradle 7.0. If you read diagnostic outputs, note that these are now always written to a unique directory per task. New: Experimental support for AGP 7.0.0 (tested up to beta01). New: Support for JDK 11 (possibly higher, but we test only JDK 11). We no longer ship a copy of ZipFlinger and now just use it directly from AGP. AGP 4.1.x is no longer supported. It may work, but we no longer test against it. New minimum supported version is AGP 4.2.0. Proguard is no longer supported. It may work, but we no longer test against it. Only R8 is officially supported now. 0.8.0 \u00b6 2021-01-04 New: Experimental support for the new upcoming TraceReferences tool from R8, which is the successor for the current PrintUses CLI that Keeper uses. See configuration instructions for more details. Updated to Kotlin 1.4.21. Special thanks to @pgreze for contributing the TraceReferences support in this release! 0.7.0 \u00b6 2020-09-25 New: enableL8RuleSharing feature for sharing generated proguard rules between androidtest and main APK assembly. See configuration instructions for more details. Make the default behavior to ignore minifyEnabled = false variants ( #61 ) Built against Kotlin 1.4, using its new explicitApi() mode ZipFlinger is now manually copied in due to shadow jar packaging issues. This version is current with AGP 4.1.0-rc03 Special thanks to @colintheshots for contributing to this release. Heads up! We\u2019re considering dropping support for Proguard. Please let us know if you need this. 0.6.0 \u00b6 2020-06-09 Keeper now supports Gradle Configuration Caching Note: At the time of writing, Gradle\u2019s JavaExec task (which Keeper uses) does not support it yet. This is expected to be resolved in Gradle 6.6. Keeper requires AGP 4.0.0 (minimum) now. Diagnostics improvements Enabling extra debug information now also triggers printing of text files with a list of all seen classes in respective jars, for easy checking. Diagnostics are now under build/intermediates/keeper/diagnostics. Note that \u201capp jars\u201d are not under the new diagnostics directory, but rather in the main keeper directory. These are now used as a task input internally. Some minor under the hood enhancements to avoid processing app classpath twice. 0.5.0 \u00b6 2020-05-28 Keeper now supports AGP 4.0 and 4.1! New enableAssertions property to control assertions behavior when running R8\u2019s PrintUses CLI. This can be useful when debugging errors, as R8 will print those errors out to the generated proguard file instead if you disable this (the default is enabled). keeper { enableAssertions . set ( false ) } 0.4.3 \u00b6 2020-05-17 ZipFlinger updated to 4.1.0-alpha09, which allows us to support Zip64. To avoid conflicts with AGP, we now shade ZipFlinger in directly. Kotlin 1.3.72 Note: versions 0.4.0-0.4.2 had packaging issues, please skip to 0.4.3. 0.3.2 \u00b6 2020-05-6 Fix support for Gradle 6.4. We assumed that the new exclusiveContent API on maven repositories would be fixed in this version, but it had another regression. 0.3.1 \u00b6 2020-03-28 Edit: Release failed to upload, we\u2019re working on a fix. In the meantime continue to use 0.3.0 and the regular non- plugins {} approach. Keeper can now be consumed via regular gradle plugins {} block. plugins { id ( \"com.slack.keeper\" ) version \"0.3.1\" } Note that we still publish to Maven Central, so you would need to add it to the repositories list in settings.gradle . pluginsManagement { repositories { mavenCentral() // woo-hoo! gradlePluginPortal() // there by default } } 0.3.0 \u00b6 2020-03-26 Keeper now uses Zipflinger for packaging, which should give a nice speed boost in creating intermediate jars. Perf comparisons on the slack app: Task Before After inferExternalStagingAndroidTestKeepRulesForKeeper 14.126s 11.138s jarExternalStagingClassesForKeeper 10.364s 6.347s jarExternalStagingAndroidTestClassesForKeeper 4.504s 2.609s Keeper now only supports AGP 3.6 or higher. If you still need AGP 3.5.x support, please continue using Keeper 0.2.0 or lower. Update Kotlin to 1.3.71. 0.2.0 \u00b6 2020-02-12 New Variant Filter API #14 \u00b6 You can specify a variantFilter on the keeper extension to dynamically configure which variants Keeper operates on (similar to the Android Gradle Plugin\u2019s VariantFilter API). keeper { variantFilter { if ( name == \"variantThatShouldTotallyBeIgnored\" ) { setIgnore ( true ) } } } R8 Repository Management Opt-Out #17 \u00b6 If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via automaticR8RepoManagement . Note that you\u2019ll need to manually add your own repo that the keeperR8 configuration can resolve from. keeper { automaticR8RepoManagement = false } // Example demo of how to configure your own R8 repo repositories { maven { url = uri ( \"https://storage.googleapis.com/r8-releases/raw\" ) content { includeModule ( \"com.android.tools\" , \"r8\" ) } } } Preliminary support for AGP 3.6 \u00b6 We\u2019ve tested up to 3.6-rc03, let us know if you see any issues! 0.1.0 \u00b6 2020-01-29 Initial release!","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0112","text":"2022-01-27 Fix: Fix a configuration caching issue when L8 rule sharing is enabled.","title":"0.11.2"},{"location":"changelog/#0111","text":"2021-08-31 Fix: Keeper\u2019s intermediate jar creation tasks previously accepted dependencies inputs based on content only. This caused build caching issues across multiple machines with Gradle remote cache enabled because it would then attempt to use the previous build\u2019s absolute path to those dependency jars and subsequently fail. This is now fixed by reworking this logic internally a bit and using absolute path sensitivity for that input. This should ensure that caching still works like before across the same machine/paths but will properly be out of date when the absolute paths change across different machines.","title":"0.11.1"},{"location":"changelog/#0110","text":"2021-07-29 Minimum supported AGP version is now 7.0.0 . It may work on older versions but YMMV. Update embedded ZipFlinger to 7.0.0 and update to its new Path constructors. Update to Kotlin 1.5.21","title":"0.11.0"},{"location":"changelog/#0100","text":"2021-06-09 Core Library Desugaring is now fully supported. See its section in on the project site for more details! The keeper.enableL8RuleSharing Gradle API is now deprecated and does nothing. L8 support is automatically enabled if android.compileOptions.coreLibraryDesugaringEnabled is true in AGP.","title":"0.10.0"},{"location":"changelog/#090","text":"2021-05-20 New: Support for Gradle 7.0. If you read diagnostic outputs, note that these are now always written to a unique directory per task. New: Experimental support for AGP 7.0.0 (tested up to beta01). New: Support for JDK 11 (possibly higher, but we test only JDK 11). We no longer ship a copy of ZipFlinger and now just use it directly from AGP. AGP 4.1.x is no longer supported. It may work, but we no longer test against it. New minimum supported version is AGP 4.2.0. Proguard is no longer supported. It may work, but we no longer test against it. Only R8 is officially supported now.","title":"0.9.0"},{"location":"changelog/#080","text":"2021-01-04 New: Experimental support for the new upcoming TraceReferences tool from R8, which is the successor for the current PrintUses CLI that Keeper uses. See configuration instructions for more details. Updated to Kotlin 1.4.21. Special thanks to @pgreze for contributing the TraceReferences support in this release!","title":"0.8.0"},{"location":"changelog/#070","text":"2020-09-25 New: enableL8RuleSharing feature for sharing generated proguard rules between androidtest and main APK assembly. See configuration instructions for more details. Make the default behavior to ignore minifyEnabled = false variants ( #61 ) Built against Kotlin 1.4, using its new explicitApi() mode ZipFlinger is now manually copied in due to shadow jar packaging issues. This version is current with AGP 4.1.0-rc03 Special thanks to @colintheshots for contributing to this release. Heads up! We\u2019re considering dropping support for Proguard. Please let us know if you need this.","title":"0.7.0"},{"location":"changelog/#060","text":"2020-06-09 Keeper now supports Gradle Configuration Caching Note: At the time of writing, Gradle\u2019s JavaExec task (which Keeper uses) does not support it yet. This is expected to be resolved in Gradle 6.6. Keeper requires AGP 4.0.0 (minimum) now. Diagnostics improvements Enabling extra debug information now also triggers printing of text files with a list of all seen classes in respective jars, for easy checking. Diagnostics are now under build/intermediates/keeper/diagnostics. Note that \u201capp jars\u201d are not under the new diagnostics directory, but rather in the main keeper directory. These are now used as a task input internally. Some minor under the hood enhancements to avoid processing app classpath twice.","title":"0.6.0"},{"location":"changelog/#050","text":"2020-05-28 Keeper now supports AGP 4.0 and 4.1! New enableAssertions property to control assertions behavior when running R8\u2019s PrintUses CLI. This can be useful when debugging errors, as R8 will print those errors out to the generated proguard file instead if you disable this (the default is enabled). keeper { enableAssertions . set ( false ) }","title":"0.5.0"},{"location":"changelog/#043","text":"2020-05-17 ZipFlinger updated to 4.1.0-alpha09, which allows us to support Zip64. To avoid conflicts with AGP, we now shade ZipFlinger in directly. Kotlin 1.3.72 Note: versions 0.4.0-0.4.2 had packaging issues, please skip to 0.4.3.","title":"0.4.3"},{"location":"changelog/#032","text":"2020-05-6 Fix support for Gradle 6.4. We assumed that the new exclusiveContent API on maven repositories would be fixed in this version, but it had another regression.","title":"0.3.2"},{"location":"changelog/#031","text":"2020-03-28 Edit: Release failed to upload, we\u2019re working on a fix. In the meantime continue to use 0.3.0 and the regular non- plugins {} approach. Keeper can now be consumed via regular gradle plugins {} block. plugins { id ( \"com.slack.keeper\" ) version \"0.3.1\" } Note that we still publish to Maven Central, so you would need to add it to the repositories list in settings.gradle . pluginsManagement { repositories { mavenCentral() // woo-hoo! gradlePluginPortal() // there by default } }","title":"0.3.1"},{"location":"changelog/#030","text":"2020-03-26 Keeper now uses Zipflinger for packaging, which should give a nice speed boost in creating intermediate jars. Perf comparisons on the slack app: Task Before After inferExternalStagingAndroidTestKeepRulesForKeeper 14.126s 11.138s jarExternalStagingClassesForKeeper 10.364s 6.347s jarExternalStagingAndroidTestClassesForKeeper 4.504s 2.609s Keeper now only supports AGP 3.6 or higher. If you still need AGP 3.5.x support, please continue using Keeper 0.2.0 or lower. Update Kotlin to 1.3.71.","title":"0.3.0"},{"location":"changelog/#020","text":"2020-02-12","title":"0.2.0"},{"location":"changelog/#new-variant-filter-api-14","text":"You can specify a variantFilter on the keeper extension to dynamically configure which variants Keeper operates on (similar to the Android Gradle Plugin\u2019s VariantFilter API). keeper { variantFilter { if ( name == \"variantThatShouldTotallyBeIgnored\" ) { setIgnore ( true ) } } }","title":"New Variant Filter API #14"},{"location":"changelog/#r8-repository-management-opt-out-17","text":"If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via automaticR8RepoManagement . Note that you\u2019ll need to manually add your own repo that the keeperR8 configuration can resolve from. keeper { automaticR8RepoManagement = false } // Example demo of how to configure your own R8 repo repositories { maven { url = uri ( \"https://storage.googleapis.com/r8-releases/raw\" ) content { includeModule ( \"com.android.tools\" , \"r8\" ) } } }","title":"R8 Repository Management Opt-Out #17"},{"location":"changelog/#preliminary-support-for-agp-36","text":"We\u2019ve tested up to 3.6-rc03, let us know if you see any issues!","title":"Preliminary support for AGP 3.6"},{"location":"changelog/#010","text":"2020-01-29 Initial release!","title":"0.1.0"},{"location":"code-of-conduct/","text":"Code of Conduct \u00b6 Introduction \u00b6 Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related pro`cedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"Code of Conduct"},{"location":"code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code-of-conduct/#introduction","text":"Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related pro`cedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"Introduction"},{"location":"configuration/","text":"Keeper\u2019s default behavior with no configuration will enable it for only buildTypes that set minifyEnabled to true. This may not be what you want for your actual production builds that you plan to distribute. Normally, your app variant\u2019s minification task doesn\u2019t depend on compilation of its corresponding androidTest variant. This means you can call assembleRelease and assembleAndroidTestRelease won\u2019t inherently run. Keeper, however, changes this since it requires the compiled androidTest sources in order to correctly infer how they use APIs in the app variant. For a production build, you likely do want these \u201ctest-only\u201d APIs removed if possible though. There are a few patterns to better control this behavior via Gradle property. Simplest solution \u00b6 The simplest solution is to add a new build type that extends release but is solely used for these tests. This way it\u2019s identical to release in everything except the name. android { buildTypes { staging { initWith release } } testBuildType = \"staging\" } Now Keeper will only wire for the StagingAndroidTest build type and the assembleRelease dependency tree will remain untouched. This is the recommended solution, since builds that need this plugin likely already have custom logic in place for controlling testBuildType and it avoids messing with your normal release build. This is what we do internally at Slack as well. Property-based Examples \u00b6 Let\u2019s assume an example command to build a production app with custom property productionBuild . ./gradlew :myapp:assembleRelease -PproductionBuild = true Use the testBuildType option \u00b6 If you avoid setting your testBuildType to your \u201crelease\u201d build type in a production build, then Keeper won\u2019t configure your release artifact to depend on test sources since your release variant would no longer be the testedVariant of any androidTest variants. android { // ... if ( hasProperty ( \"productionBuild\" )) { testBuildType = \"debug\" } else { testBuildType = \"release\" } } Avoid applying the plugin entirely \u00b6 This is probably the simplest approach, but not as dynamic as controlling the testBuildType . if (! hasProperty ( \"productionBuild\" )) { apply plugin: \"com.slack.keeper\" } Variant filter \u00b6 By default, Keeper will run on any app variant that sets minifyEnabled to true. Alternatively, you can specify a variantFilter on the keeper extension and dynamically configure which variants Keeper operates on. This is nearly identical to AGP\u2019s native variantFilter API except that there is no defaultConfig property. Note: Variants with different enabled values will have to be compiled separately. This is common in most multi-variant projects anyway, but something to be aware of. keeper { variantFilter { if ( name == \"variantThatShouldTotallyBeIgnored\" ) { setIgnore ( true ) } } } \u00b6 Everyone\u2019s project is different, so you should do whatever works for you! We\u2019re open to suggestions of better ways to support configuration for this, so please do file issues if you have any proposals. Custom R8 behavior \u00b6 Keeper uses R8\u2019s PrintUses CLI under the hood for rules inference. By default it uses R8 version 1.6.53 . If you want to customize what version is used, you can specify the dependency via the keeperR8 configuration. Note that these must be tags from R8\u2019s r8-releases/raw maven repo. dependencies { keeperR8 \"com.android.tools:r8:x.y.z\" } If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via automaticR8RepoManagement . Note that you\u2019ll need to manually add your own repo that the keeperR8 configuration mentioned above can resolve from. keeper { automaticR8RepoManagement = false } If you want to add custom JVM arguments to its invocation (i.e. for debugging), you and set them via the keeper extension. keeper { /** * Optional custom jvm arguments to pass into the R8 `PrintUses` execution. Useful if you want * to enable debugging in R8. Default is empty. * * Example: `listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\")` */ r8JvmArgs = [] } TraceReferences \u00b6 Heads up! TraceReferences is still experimental. Before reporting issues, please check if it\u2019s an issue with Keeper or TraceReferences itself before filing. If it\u2019s an issue with TraceReferences, please file on the Android issue tracker instead: https://issuetracker.google.com/issues/new?component=326788 TraceReferences is a new tool for generating Proguard rules based on one jar\u2019s usage of classes in another jar. It is the formal successor and long-term replacement for the current PrintUses CLI that Keeper currently uses. keeper { traceReferences { // Invoking this enables it! // Optional: extra arguments to pass to TraceReferences arguments . set ( listOf ( \"--map-diagnostics:MissingDefinitionsDiagnostic\" , \"error\" , \"info\" )) } } Note that this uses the R8 version controlled by the R8 version defined by the keeperR8 version. If you want to change it, set the version in keeperR8 to whichever version you want (must be higher than 3.0.9-dev ).","title":"Configuration"},{"location":"configuration/#simplest-solution","text":"The simplest solution is to add a new build type that extends release but is solely used for these tests. This way it\u2019s identical to release in everything except the name. android { buildTypes { staging { initWith release } } testBuildType = \"staging\" } Now Keeper will only wire for the StagingAndroidTest build type and the assembleRelease dependency tree will remain untouched. This is the recommended solution, since builds that need this plugin likely already have custom logic in place for controlling testBuildType and it avoids messing with your normal release build. This is what we do internally at Slack as well.","title":"Simplest solution"},{"location":"configuration/#property-based-examples","text":"Let\u2019s assume an example command to build a production app with custom property productionBuild . ./gradlew :myapp:assembleRelease -PproductionBuild = true","title":"Property-based Examples"},{"location":"configuration/#use-the-testbuildtype-option","text":"If you avoid setting your testBuildType to your \u201crelease\u201d build type in a production build, then Keeper won\u2019t configure your release artifact to depend on test sources since your release variant would no longer be the testedVariant of any androidTest variants. android { // ... if ( hasProperty ( \"productionBuild\" )) { testBuildType = \"debug\" } else { testBuildType = \"release\" } }","title":"Use the testBuildType option"},{"location":"configuration/#avoid-applying-the-plugin-entirely","text":"This is probably the simplest approach, but not as dynamic as controlling the testBuildType . if (! hasProperty ( \"productionBuild\" )) { apply plugin: \"com.slack.keeper\" }","title":"Avoid applying the plugin entirely"},{"location":"configuration/#variant-filter","text":"By default, Keeper will run on any app variant that sets minifyEnabled to true. Alternatively, you can specify a variantFilter on the keeper extension and dynamically configure which variants Keeper operates on. This is nearly identical to AGP\u2019s native variantFilter API except that there is no defaultConfig property. Note: Variants with different enabled values will have to be compiled separately. This is common in most multi-variant projects anyway, but something to be aware of. keeper { variantFilter { if ( name == \"variantThatShouldTotallyBeIgnored\" ) { setIgnore ( true ) } } }","title":"Variant filter"},{"location":"configuration/#_1","text":"Everyone\u2019s project is different, so you should do whatever works for you! We\u2019re open to suggestions of better ways to support configuration for this, so please do file issues if you have any proposals.","title":""},{"location":"configuration/#custom-r8-behavior","text":"Keeper uses R8\u2019s PrintUses CLI under the hood for rules inference. By default it uses R8 version 1.6.53 . If you want to customize what version is used, you can specify the dependency via the keeperR8 configuration. Note that these must be tags from R8\u2019s r8-releases/raw maven repo. dependencies { keeperR8 \"com.android.tools:r8:x.y.z\" } If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via automaticR8RepoManagement . Note that you\u2019ll need to manually add your own repo that the keeperR8 configuration mentioned above can resolve from. keeper { automaticR8RepoManagement = false } If you want to add custom JVM arguments to its invocation (i.e. for debugging), you and set them via the keeper extension. keeper { /** * Optional custom jvm arguments to pass into the R8 `PrintUses` execution. Useful if you want * to enable debugging in R8. Default is empty. * * Example: `listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\")` */ r8JvmArgs = [] }","title":"Custom R8 behavior"},{"location":"configuration/#tracereferences","text":"Heads up! TraceReferences is still experimental. Before reporting issues, please check if it\u2019s an issue with Keeper or TraceReferences itself before filing. If it\u2019s an issue with TraceReferences, please file on the Android issue tracker instead: https://issuetracker.google.com/issues/new?component=326788 TraceReferences is a new tool for generating Proguard rules based on one jar\u2019s usage of classes in another jar. It is the formal successor and long-term replacement for the current PrintUses CLI that Keeper currently uses. keeper { traceReferences { // Invoking this enables it! // Optional: extra arguments to pass to TraceReferences arguments . set ( listOf ( \"--map-diagnostics:MissingDefinitionsDiagnostic\" , \"error\" , \"info\" )) } } Note that this uses the R8 version controlled by the R8 version defined by the keeperR8 version. If you want to change it, set the version in keeperR8 to whichever version you want (must be higher than 3.0.9-dev ).","title":"TraceReferences"},{"location":"contributing/","text":"Contributors Guide \u00b6 Interested in contributing? Awesome! Before you do though, please read our Code of Conduct . We take it very seriously, and expect that you will as well. There are many ways you can contribute! \u2764\ufe0f Bug Reports and Fixes \ud83d\udc1e \u00b6 If you find a bug, please search for it in the issues , and if it isn\u2019t already tracked, create a new issue . Fill out the \u201cBug Report\u201d section of the issue template. Even if an issue is closed, feel free to comment and add details, it will still be reviewed. Issues that have already been identified as a bug (note: able to reproduce) will be labelled bug . If you\u2019d like to submit a fix for a bug, send a pull request and mention the issue number. Include tests that isolate the bug and verifies that it was fixed. New Features \ud83d\udca1 \u00b6 If you\u2019d like to add new functionality to this project, describe the problem you want to solve in a new issue . Issues that have been identified as a feature request will be labelled enhancement . If you\u2019d like to implement the new feature, please wait for feedback from the project maintainers before spending too much time writing the code. In some cases, enhancement s may not align well with the project objectives at the time. Tests \ud83d\udd0e, Documentation \ud83d\udcda, Miscellaneous \u2728 \u00b6 If you\u2019d like to improve the tests, you want to make the documentation clearer, you have an alternative implementation of something that may have advantages over the way its currently done, or you have any other change, we would be happy to hear about it! If its a trivial change, go ahead and pull request with the changes you have in mind. If not, open an issue to discuss the idea first. If you\u2019re new to our project and looking for some way to make your first contribution, look for issues labelled good first contribution . Requirements \u00b6 For your contribution to be accepted: [x] You must have signed the Contributor License Agreement (CLA) . [x] The test suite must be complete and pass. [x] The changes must be approved by code review. [x] Commits should be atomic and messages must be descriptive. Related issues should be mentioned by issue number. If the contribution doesn\u2019t meet the above criteria, you may fail our automated checks or a maintainer will discuss it with you. You can continue to improve a Pull Request by adding commits to the branch from which the PR was created. Interested in knowing more about about pull requests at Slack? Creating a Pull Request \u00b6 \ud83c\udf74 Fork the repository on GitHub. \ud83c\udfc3\u200d\u2640\ufe0f Clone/fetch your fork to your local development machine. It\u2019s a good idea to run the tests just to make sure everything is in order. \ud83c\udf3f Create a new branch and check it out. \ud83d\udd2e Make your changes and commit them locally. Magic happens here! \u2934\ufe0f Push your new branch to your fork. (e.g. git push username fix-issue-16 ). \ud83d\udce5 Open a Pull Request on github.com from your new branch on your fork to main in this repository. Maintainers \u00b6 There are more details about processes and workflow in the Maintainer\u2019s Guide .","title":"Contributing"},{"location":"contributing/#contributors-guide","text":"Interested in contributing? Awesome! Before you do though, please read our Code of Conduct . We take it very seriously, and expect that you will as well. There are many ways you can contribute! \u2764\ufe0f","title":"Contributors Guide"},{"location":"contributing/#bug-reports-and-fixes","text":"If you find a bug, please search for it in the issues , and if it isn\u2019t already tracked, create a new issue . Fill out the \u201cBug Report\u201d section of the issue template. Even if an issue is closed, feel free to comment and add details, it will still be reviewed. Issues that have already been identified as a bug (note: able to reproduce) will be labelled bug . If you\u2019d like to submit a fix for a bug, send a pull request and mention the issue number. Include tests that isolate the bug and verifies that it was fixed.","title":"Bug Reports and Fixes \ud83d\udc1e"},{"location":"contributing/#new-features","text":"If you\u2019d like to add new functionality to this project, describe the problem you want to solve in a new issue . Issues that have been identified as a feature request will be labelled enhancement . If you\u2019d like to implement the new feature, please wait for feedback from the project maintainers before spending too much time writing the code. In some cases, enhancement s may not align well with the project objectives at the time.","title":"New Features \ud83d\udca1"},{"location":"contributing/#tests-documentation-miscellaneous","text":"If you\u2019d like to improve the tests, you want to make the documentation clearer, you have an alternative implementation of something that may have advantages over the way its currently done, or you have any other change, we would be happy to hear about it! If its a trivial change, go ahead and pull request with the changes you have in mind. If not, open an issue to discuss the idea first. If you\u2019re new to our project and looking for some way to make your first contribution, look for issues labelled good first contribution .","title":"Tests \ud83d\udd0e, Documentation \ud83d\udcda, Miscellaneous \u2728"},{"location":"contributing/#requirements","text":"For your contribution to be accepted: [x] You must have signed the Contributor License Agreement (CLA) . [x] The test suite must be complete and pass. [x] The changes must be approved by code review. [x] Commits should be atomic and messages must be descriptive. Related issues should be mentioned by issue number. If the contribution doesn\u2019t meet the above criteria, you may fail our automated checks or a maintainer will discuss it with you. You can continue to improve a Pull Request by adding commits to the branch from which the PR was created. Interested in knowing more about about pull requests at Slack?","title":"Requirements"},{"location":"contributing/#creating-a-pull-request","text":"\ud83c\udf74 Fork the repository on GitHub. \ud83c\udfc3\u200d\u2640\ufe0f Clone/fetch your fork to your local development machine. It\u2019s a good idea to run the tests just to make sure everything is in order. \ud83c\udf3f Create a new branch and check it out. \ud83d\udd2e Make your changes and commit them locally. Magic happens here! \u2934\ufe0f Push your new branch to your fork. (e.g. git push username fix-issue-16 ). \ud83d\udce5 Open a Pull Request on github.com from your new branch on your fork to main in this repository.","title":"Creating a Pull Request"},{"location":"contributing/#maintainers","text":"There are more details about processes and workflow in the Maintainer\u2019s Guide .","title":"Maintainers"},{"location":"0.x/","text":"// keeper-gradle-plugin keeper-gradle-plugin \u00b6 Packages \u00b6 Name com.slack.keeper","title":"Index"},{"location":"0.x/#keeper-gradle-plugin","text":"","title":"keeper-gradle-plugin"},{"location":"0.x/#packages","text":"Name com.slack.keeper","title":"Packages"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/","text":"// keeper-gradle-plugin / com.slack.keeper Package com.slack.keeper \u00b6 Types \u00b6 Name Summary AndroidTestVariantClasspathJar [jvm] @ CacheableTask () abstract class AndroidTestVariantClasspathJar : BaseKeeperJarTask A Jar task that sources from both the androidTest compiled sources and its distinct dependencies (as compared to the appJarsFile ). BaseKeeperJarTask [jvm] abstract class BaseKeeperJarTask : DefaultTask InferAndroidTestKeepRules [jvm] @ CacheableTask () abstract class InferAndroidTestKeepRules : JavaExec Generates proguard keep rules from the generated androidTestSourceJar and appTargetJar tasks, where the generates rules are based on what classes from appTargetJar are used by androidTestSourceJar . KeeperExtension [jvm] open class KeeperExtension @Inject()constructor( objects : ObjectFactory ) Configuration for the InferAndroidTestKeepRules . KeeperPlugin [jvm] class KeeperPlugin : Plugin < Project > A simple Gradle plugin that hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. TraceReferences [jvm] abstract class TraceReferences @Inject()constructor( objects : ObjectFactory ) VariantClasspathJar [jvm] @ CacheableTask () abstract class VariantClasspathJar : BaseKeeperJarTask A simple cacheable task that creates a jar from a given classpath . VariantFilter [jvm] interface VariantFilter","title":"API"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/#package-comslackkeeper","text":"","title":"Package com.slack.keeper"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/#types","text":"Name Summary AndroidTestVariantClasspathJar [jvm] @ CacheableTask () abstract class AndroidTestVariantClasspathJar : BaseKeeperJarTask A Jar task that sources from both the androidTest compiled sources and its distinct dependencies (as compared to the appJarsFile ). BaseKeeperJarTask [jvm] abstract class BaseKeeperJarTask : DefaultTask InferAndroidTestKeepRules [jvm] @ CacheableTask () abstract class InferAndroidTestKeepRules : JavaExec Generates proguard keep rules from the generated androidTestSourceJar and appTargetJar tasks, where the generates rules are based on what classes from appTargetJar are used by androidTestSourceJar . KeeperExtension [jvm] open class KeeperExtension @Inject()constructor( objects : ObjectFactory ) Configuration for the InferAndroidTestKeepRules . KeeperPlugin [jvm] class KeeperPlugin : Plugin < Project > A simple Gradle plugin that hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. TraceReferences [jvm] abstract class TraceReferences @Inject()constructor( objects : ObjectFactory ) VariantClasspathJar [jvm] @ CacheableTask () abstract class VariantClasspathJar : BaseKeeperJarTask A simple cacheable task that creates a jar from a given classpath . VariantFilter [jvm] interface VariantFilter","title":"Types"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar AndroidTestVariantClasspathJar \u00b6 [jvm]\\ @ CacheableTask () abstract class AndroidTestVariantClasspathJar : BaseKeeperJarTask A Jar task that sources from both the androidTest compiled sources and its distinct dependencies (as compared to the appJarsFile ). R8\u2019s PrintUses requires no class overlap between the two jars it\u2019s comparing, so at copy-time this will compute the unique androidTest dependencies. We need to have them because there may be APIs that they use that are used in the target app runtime, and we want R8 to account for those usages as well. Constructors \u00b6 AndroidTestVariantClasspathJar [jvm] fun AndroidTestVariantClasspathJar () Functions \u00b6 Name Summary createJar [jvm] fun createJar () from [jvm] fun from (vararg paths: Any ) Properties \u00b6 Name Summary appJarsFile [jvm] abstract val appJarsFile : RegularFileProperty archiveFile [jvm] abstract val archiveFile : RegularFileProperty classpath [jvm] abstract val classpath : ConfigurableFileCollection","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/#androidtestvariantclasspathjar","text":"[jvm]\\ @ CacheableTask () abstract class AndroidTestVariantClasspathJar : BaseKeeperJarTask A Jar task that sources from both the androidTest compiled sources and its distinct dependencies (as compared to the appJarsFile ). R8\u2019s PrintUses requires no class overlap between the two jars it\u2019s comparing, so at copy-time this will compute the unique androidTest dependencies. We need to have them because there may be APIs that they use that are used in the target app runtime, and we want R8 to account for those usages as well.","title":"AndroidTestVariantClasspathJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/#constructors","text":"AndroidTestVariantClasspathJar [jvm] fun AndroidTestVariantClasspathJar ()","title":"Constructors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/#functions","text":"Name Summary createJar [jvm] fun createJar () from [jvm] fun from (vararg paths: Any )","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/#properties","text":"Name Summary appJarsFile [jvm] abstract val appJarsFile : RegularFileProperty archiveFile [jvm] abstract val archiveFile : RegularFileProperty classpath [jvm] abstract val classpath : ConfigurableFileCollection","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/-android-test-variant-classpath-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / AndroidTestVariantClasspathJar AndroidTestVariantClasspathJar \u00b6 [jvm]\\ fun AndroidTestVariantClasspathJar ()","title":" android test variant classpath jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/-android-test-variant-classpath-jar/#androidtestvariantclasspathjar","text":"[jvm]\\ fun AndroidTestVariantClasspathJar ()","title":"AndroidTestVariantClasspathJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/app-jars-file/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / appJarsFile appJarsFile \u00b6 [jvm]\\ abstract val appJarsFile : RegularFileProperty","title":"App jars file"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/app-jars-file/#appjarsfile","text":"[jvm]\\ abstract val appJarsFile : RegularFileProperty","title":"appJarsFile"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/archive-file/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / archiveFile archiveFile \u00b6 [jvm]\\ abstract val archiveFile : RegularFileProperty","title":"Archive file"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/archive-file/#archivefile","text":"[jvm]\\ abstract val archiveFile : RegularFileProperty","title":"archiveFile"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/classpath/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / classpath classpath \u00b6 [jvm]\\ abstract val classpath : ConfigurableFileCollection","title":"Classpath"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/classpath/#classpath","text":"[jvm]\\ abstract val classpath : ConfigurableFileCollection","title":"classpath"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/create-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / createJar createJar \u00b6 [jvm]\\ fun createJar ()","title":"Create jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/create-jar/#createjar","text":"[jvm]\\ fun createJar ()","title":"createJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/from/","text":"// keeper-gradle-plugin / com.slack.keeper / AndroidTestVariantClasspathJar / from from \u00b6 [jvm]\\ fun from (vararg paths: Any )","title":"From"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-android-test-variant-classpath-jar/from/#from","text":"[jvm]\\ fun from (vararg paths: Any )","title":"from"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask BaseKeeperJarTask \u00b6 [jvm]\\ abstract class BaseKeeperJarTask : DefaultTask Functions \u00b6 Name Summary getArtifactFiles [jvm] @ PathSensitive (value = PathSensitivity.ABSOLUTE ) @ InputFiles () fun getArtifactFiles (): FileCollection This needs to use InputFiles and PathSensitivity.ABSOLUTE because the path to the jars really does matter here. setArtifacts [jvm] fun setArtifacts (artifacts: ArtifactCollection ) This artifact collection is the result of resolving the compilation classpath. Properties \u00b6 Name Summary diagnosticsOutputDir [jvm] abstract val diagnosticsOutputDir : DirectoryProperty emitDebugInfo [jvm] abstract val emitDebugInfo : Property < Boolean > Inheritors \u00b6 Name VariantClasspathJar AndroidTestVariantClasspathJar","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/#basekeeperjartask","text":"[jvm]\\ abstract class BaseKeeperJarTask : DefaultTask","title":"BaseKeeperJarTask"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/#functions","text":"Name Summary getArtifactFiles [jvm] @ PathSensitive (value = PathSensitivity.ABSOLUTE ) @ InputFiles () fun getArtifactFiles (): FileCollection This needs to use InputFiles and PathSensitivity.ABSOLUTE because the path to the jars really does matter here. setArtifacts [jvm] fun setArtifacts (artifacts: ArtifactCollection ) This artifact collection is the result of resolving the compilation classpath.","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/#properties","text":"Name Summary diagnosticsOutputDir [jvm] abstract val diagnosticsOutputDir : DirectoryProperty emitDebugInfo [jvm] abstract val emitDebugInfo : Property < Boolean >","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/#inheritors","text":"Name VariantClasspathJar AndroidTestVariantClasspathJar","title":"Inheritors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/-base-keeper-jar-task/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask / BaseKeeperJarTask BaseKeeperJarTask \u00b6 [jvm]\\ fun BaseKeeperJarTask ()","title":" base keeper jar task"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/-base-keeper-jar-task/#basekeeperjartask","text":"[jvm]\\ fun BaseKeeperJarTask ()","title":"BaseKeeperJarTask"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/diagnostics-output-dir/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask / diagnosticsOutputDir diagnosticsOutputDir \u00b6 [jvm]\\ abstract val diagnosticsOutputDir : DirectoryProperty","title":"Diagnostics output dir"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/diagnostics-output-dir/#diagnosticsoutputdir","text":"[jvm]\\ abstract val diagnosticsOutputDir : DirectoryProperty","title":"diagnosticsOutputDir"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/emit-debug-info/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask / emitDebugInfo emitDebugInfo \u00b6 [jvm]\\ abstract val emitDebugInfo : Property < Boolean >","title":"Emit debug info"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/emit-debug-info/#emitdebuginfo","text":"[jvm]\\ abstract val emitDebugInfo : Property < Boolean >","title":"emitDebugInfo"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/get-artifact-files/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask / getArtifactFiles getArtifactFiles \u00b6 [jvm]\\ @ PathSensitive (value = PathSensitivity.ABSOLUTE ) @ InputFiles () fun getArtifactFiles (): FileCollection This needs to use InputFiles and PathSensitivity.ABSOLUTE because the path to the jars really does matter here. Using Classpath is an error, as it looks only at content and not name or path, and we really do need to know the actual path to the artifact, even if its contents haven\u2019t changed.","title":"Get artifact files"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/get-artifact-files/#getartifactfiles","text":"[jvm]\\ @ PathSensitive (value = PathSensitivity.ABSOLUTE ) @ InputFiles () fun getArtifactFiles (): FileCollection This needs to use InputFiles and PathSensitivity.ABSOLUTE because the path to the jars really does matter here. Using Classpath is an error, as it looks only at content and not name or path, and we really do need to know the actual path to the artifact, even if its contents haven\u2019t changed.","title":"getArtifactFiles"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/set-artifacts/","text":"// keeper-gradle-plugin / com.slack.keeper / BaseKeeperJarTask / setArtifacts setArtifacts \u00b6 [jvm]\\ fun setArtifacts (artifacts: ArtifactCollection ) This artifact collection is the result of resolving the compilation classpath.","title":"Set artifacts"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-base-keeper-jar-task/set-artifacts/#setartifacts","text":"[jvm]\\ fun setArtifacts (artifacts: ArtifactCollection ) This artifact collection is the result of resolving the compilation classpath.","title":"setArtifacts"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules InferAndroidTestKeepRules \u00b6 [jvm]\\ @ CacheableTask () abstract class InferAndroidTestKeepRules : JavaExec Generates proguard keep rules from the generated androidTestSourceJar and appTargetJar tasks, where the generates rules are based on what classes from appTargetJar are used by androidTestSourceJar . This uses R8\u2019s PrintUses CLI to perform the analysis. This task\u2019s output is finally used as an input into the app variant\u2019s proguard transform task. Constructors \u00b6 InferAndroidTestKeepRules [jvm] fun InferAndroidTestKeepRules () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary exec [jvm] open override fun exec () Properties \u00b6 Name Summary androidJar [jvm] abstract val androidJar : RegularFileProperty androidTestJar [jvm] abstract val androidTestJar : RegularFileProperty androidTestSourceJar [jvm] abstract val androidTestSourceJar : RegularFileProperty appTargetJar [jvm] abstract val appTargetJar : RegularFileProperty enableAssertionsProperty [jvm] abstract val enableAssertionsProperty : Property < Boolean > Enable more descriptive precondition checks in the CLI. jvmArgsProperty [jvm] abstract val jvmArgsProperty : ListProperty < String > Optional custom jvm arguments to pass into the exec. outputProguardRules [jvm] abstract val outputProguardRules : RegularFileProperty traceReferencesArgs [jvm] abstract val traceReferencesArgs : ListProperty < String > traceReferencesEnabled [jvm] abstract val traceReferencesEnabled : Property < Boolean >","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/#inferandroidtestkeeprules","text":"[jvm]\\ @ CacheableTask () abstract class InferAndroidTestKeepRules : JavaExec Generates proguard keep rules from the generated androidTestSourceJar and appTargetJar tasks, where the generates rules are based on what classes from appTargetJar are used by androidTestSourceJar . This uses R8\u2019s PrintUses CLI to perform the analysis. This task\u2019s output is finally used as an input into the app variant\u2019s proguard transform task.","title":"InferAndroidTestKeepRules"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/#constructors","text":"InferAndroidTestKeepRules [jvm] fun InferAndroidTestKeepRules ()","title":"Constructors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/#functions","text":"Name Summary exec [jvm] open override fun exec ()","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/#properties","text":"Name Summary androidJar [jvm] abstract val androidJar : RegularFileProperty androidTestJar [jvm] abstract val androidTestJar : RegularFileProperty androidTestSourceJar [jvm] abstract val androidTestSourceJar : RegularFileProperty appTargetJar [jvm] abstract val appTargetJar : RegularFileProperty enableAssertionsProperty [jvm] abstract val enableAssertionsProperty : Property < Boolean > Enable more descriptive precondition checks in the CLI. jvmArgsProperty [jvm] abstract val jvmArgsProperty : ListProperty < String > Optional custom jvm arguments to pass into the exec. outputProguardRules [jvm] abstract val outputProguardRules : RegularFileProperty traceReferencesArgs [jvm] abstract val traceReferencesArgs : ListProperty < String > traceReferencesEnabled [jvm] abstract val traceReferencesEnabled : Property < Boolean >","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-infer-android-test-keep-rules/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / InferAndroidTestKeepRules InferAndroidTestKeepRules \u00b6 [jvm]\\ fun InferAndroidTestKeepRules ()","title":" infer android test keep rules"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-infer-android-test-keep-rules/#inferandroidtestkeeprules","text":"[jvm]\\ fun InferAndroidTestKeepRules ()","title":"InferAndroidTestKeepRules"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / androidJar androidJar \u00b6 [jvm]\\ abstract val androidJar : RegularFileProperty","title":"Android jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-jar/#androidjar","text":"[jvm]\\ abstract val androidJar : RegularFileProperty","title":"androidJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-test-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / androidTestJar androidTestJar \u00b6 [jvm]\\ abstract val androidTestJar : RegularFileProperty","title":"Android test jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-test-jar/#androidtestjar","text":"[jvm]\\ abstract val androidTestJar : RegularFileProperty","title":"androidTestJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-test-source-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / androidTestSourceJar androidTestSourceJar \u00b6 [jvm]\\ abstract val androidTestSourceJar : RegularFileProperty","title":"Android test source jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/android-test-source-jar/#androidtestsourcejar","text":"[jvm]\\ abstract val androidTestSourceJar : RegularFileProperty","title":"androidTestSourceJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/app-target-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / appTargetJar appTargetJar \u00b6 [jvm]\\ abstract val appTargetJar : RegularFileProperty","title":"App target jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/app-target-jar/#apptargetjar","text":"[jvm]\\ abstract val appTargetJar : RegularFileProperty","title":"appTargetJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/enable-assertions-property/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / enableAssertionsProperty enableAssertionsProperty \u00b6 [jvm]\\ abstract val enableAssertionsProperty : Property < Boolean > Enable more descriptive precondition checks in the CLI. If disabled, errors will be emitted to the generated proguard rules file instead.","title":"Enable assertions property"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/enable-assertions-property/#enableassertionsproperty","text":"[jvm]\\ abstract val enableAssertionsProperty : Property < Boolean > Enable more descriptive precondition checks in the CLI. If disabled, errors will be emitted to the generated proguard rules file instead.","title":"enableAssertionsProperty"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/exec/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / exec exec \u00b6 [jvm]\\ open override fun exec ()","title":"Exec"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/exec/#exec","text":"[jvm]\\ open override fun exec ()","title":"exec"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/jvm-args-property/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / jvmArgsProperty jvmArgsProperty \u00b6 [jvm]\\ abstract val jvmArgsProperty : ListProperty < String > Optional custom jvm arguments to pass into the exec. Useful if you want to enable debugging in R8. Example: listOf(\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d)","title":"Jvm args property"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/jvm-args-property/#jvmargsproperty","text":"[jvm]\\ abstract val jvmArgsProperty : ListProperty < String > Optional custom jvm arguments to pass into the exec. Useful if you want to enable debugging in R8. Example: listOf(\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d)","title":"jvmArgsProperty"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/output-proguard-rules/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / outputProguardRules outputProguardRules \u00b6 [jvm]\\ abstract val outputProguardRules : RegularFileProperty","title":"Output proguard rules"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/output-proguard-rules/#outputproguardrules","text":"[jvm]\\ abstract val outputProguardRules : RegularFileProperty","title":"outputProguardRules"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-args/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / traceReferencesArgs traceReferencesArgs \u00b6 [jvm]\\ abstract val traceReferencesArgs : ListProperty < String > See also \u00b6 jvm com.slack.keeper.TraceReferences","title":"Trace references args"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-args/#tracereferencesargs","text":"[jvm]\\ abstract val traceReferencesArgs : ListProperty < String >","title":"traceReferencesArgs"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-args/#see-also","text":"jvm com.slack.keeper.TraceReferences","title":"See also"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-enabled/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / traceReferencesEnabled traceReferencesEnabled \u00b6 [jvm]\\ abstract val traceReferencesEnabled : Property < Boolean > See also \u00b6 jvm TraceReferences.isEnabled","title":"Trace references enabled"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-enabled/#tracereferencesenabled","text":"[jvm]\\ abstract val traceReferencesEnabled : Property < Boolean >","title":"traceReferencesEnabled"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/trace-references-enabled/#see-also","text":"jvm TraceReferences.isEnabled","title":"See also"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-companion/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] operator fun invoke (variantName: String , androidTestJarProvider: TaskProvider AndroidTestVariantClasspathJar >, releaseClassesJarProvider: TaskProvider VariantClasspathJar >, androidJar: Provider < RegularFile >, androidTestJar: Provider < RegularFile >, automaticallyAddR8Repo: Property < Boolean >, enableAssertions: Property < Boolean >, extensionJvmArgs: ListProperty < String >, traceReferencesEnabled: Property < Boolean >, traceReferencesArgs: ListProperty < String >, r8Configuration: Configuration ): InferAndroidTestKeepRules .() -> Unit","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-companion/#functions","text":"Name Summary invoke [jvm] operator fun invoke (variantName: String , androidTestJarProvider: TaskProvider AndroidTestVariantClasspathJar >, releaseClassesJarProvider: TaskProvider VariantClasspathJar >, androidJar: Provider < RegularFile >, androidTestJar: Provider < RegularFile >, automaticallyAddR8Repo: Property < Boolean >, enableAssertions: Property < Boolean >, extensionJvmArgs: ListProperty < String >, traceReferencesEnabled: Property < Boolean >, traceReferencesArgs: ListProperty < String >, r8Configuration: Configuration ): InferAndroidTestKeepRules .() -> Unit","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-companion/invoke/","text":"// keeper-gradle-plugin / com.slack.keeper / InferAndroidTestKeepRules / Companion / invoke invoke \u00b6 [jvm]\\ operator fun invoke (variantName: String , androidTestJarProvider: TaskProvider AndroidTestVariantClasspathJar >, releaseClassesJarProvider: TaskProvider VariantClasspathJar >, androidJar: Provider < RegularFile >, androidTestJar: Provider < RegularFile >, automaticallyAddR8Repo: Property < Boolean >, enableAssertions: Property < Boolean >, extensionJvmArgs: ListProperty < String >, traceReferencesEnabled: Property < Boolean >, traceReferencesArgs: ListProperty < String >, r8Configuration: Configuration ): InferAndroidTestKeepRules .() -> Unit","title":"Invoke"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-infer-android-test-keep-rules/-companion/invoke/#invoke","text":"[jvm]\\ operator fun invoke (variantName: String , androidTestJarProvider: TaskProvider AndroidTestVariantClasspathJar >, releaseClassesJarProvider: TaskProvider VariantClasspathJar >, androidJar: Provider < RegularFile >, androidTestJar: Provider < RegularFile >, automaticallyAddR8Repo: Property < Boolean >, enableAssertions: Property < Boolean >, extensionJvmArgs: ListProperty < String >, traceReferencesEnabled: Property < Boolean >, traceReferencesArgs: ListProperty < String >, r8Configuration: Configuration ): InferAndroidTestKeepRules .() -> Unit","title":"invoke"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension KeeperExtension \u00b6 [jvm]\\ open class KeeperExtension @Inject()constructor( objects : ObjectFactory ) Configuration for the InferAndroidTestKeepRules . Constructors \u00b6 KeeperExtension [jvm] @Inject() fun KeeperExtension (objects: ObjectFactory ) Functions \u00b6 Name Summary traceReferences [jvm] fun traceReferences (action: Action < TraceReferences >) Allows to enable the new experimental TraceReferences entry-point, and optionally specify additional arguments. variantFilter [jvm] fun variantFilter (action: Action < VariantFilter >) Applies a variant filter for Android. Properties \u00b6 Name Summary automaticR8RepoManagement [jvm] val automaticR8RepoManagement : Property < Boolean > Controls whether or not to automatically add the R8 repository for dependencies. emitDebugInformation [jvm] val emitDebugInformation : Property < Boolean > Emit extra debug information, useful for bug reporting. enableAssertions [jvm] val enableAssertions : Property < Boolean > Controls whether or not to enable assertions in the JavaExec run of R8. r8JvmArgs [jvm] val r8JvmArgs : ListProperty < String > Optional custom jvm arguments to pass into the R8 PrintUses execution.","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/#keeperextension","text":"[jvm]\\ open class KeeperExtension @Inject()constructor( objects : ObjectFactory ) Configuration for the InferAndroidTestKeepRules .","title":"KeeperExtension"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/#constructors","text":"KeeperExtension [jvm] @Inject() fun KeeperExtension (objects: ObjectFactory )","title":"Constructors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/#functions","text":"Name Summary traceReferences [jvm] fun traceReferences (action: Action < TraceReferences >) Allows to enable the new experimental TraceReferences entry-point, and optionally specify additional arguments. variantFilter [jvm] fun variantFilter (action: Action < VariantFilter >) Applies a variant filter for Android.","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/#properties","text":"Name Summary automaticR8RepoManagement [jvm] val automaticR8RepoManagement : Property < Boolean > Controls whether or not to automatically add the R8 repository for dependencies. emitDebugInformation [jvm] val emitDebugInformation : Property < Boolean > Emit extra debug information, useful for bug reporting. enableAssertions [jvm] val enableAssertions : Property < Boolean > Controls whether or not to enable assertions in the JavaExec run of R8. r8JvmArgs [jvm] val r8JvmArgs : ListProperty < String > Optional custom jvm arguments to pass into the R8 PrintUses execution.","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/-keeper-extension/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / KeeperExtension KeeperExtension \u00b6 [jvm]\\ @Inject() fun KeeperExtension (objects: ObjectFactory )","title":" keeper extension"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/-keeper-extension/#keeperextension","text":"[jvm]\\ @Inject() fun KeeperExtension (objects: ObjectFactory )","title":"KeeperExtension"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/automatic-r8-repo-management/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / automaticR8RepoManagement automaticR8RepoManagement \u00b6 [jvm]\\ val automaticR8RepoManagement : Property < Boolean > Controls whether or not to automatically add the R8 repository for dependencies. Default is true. Disable if you want to define your own repo for fetching the R8 dependency.","title":"Automatic r8 repo management"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/automatic-r8-repo-management/#automaticr8repomanagement","text":"[jvm]\\ val automaticR8RepoManagement : Property < Boolean > Controls whether or not to automatically add the R8 repository for dependencies. Default is true. Disable if you want to define your own repo for fetching the R8 dependency.","title":"automaticR8RepoManagement"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/emit-debug-information/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / emitDebugInformation emitDebugInformation \u00b6 [jvm]\\ val emitDebugInformation : Property < Boolean > Emit extra debug information, useful for bug reporting.","title":"Emit debug information"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/emit-debug-information/#emitdebuginformation","text":"[jvm]\\ val emitDebugInformation : Property < Boolean > Emit extra debug information, useful for bug reporting.","title":"emitDebugInformation"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/enable-assertions/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / enableAssertions enableAssertions \u00b6 [jvm]\\ val enableAssertions : Property < Boolean > Controls whether or not to enable assertions in the JavaExec run of R8. Default is true.","title":"Enable assertions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/enable-assertions/#enableassertions","text":"[jvm]\\ val enableAssertions : Property < Boolean > Controls whether or not to enable assertions in the JavaExec run of R8. Default is true.","title":"enableAssertions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/r8-jvm-args/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / r8JvmArgs r8JvmArgs \u00b6 [jvm]\\ val r8JvmArgs : ListProperty < String > Optional custom jvm arguments to pass into the R8 PrintUses execution. Useful if you want to enable debugging in R8. Example: listOf(\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d)","title":"R8 jvm args"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/r8-jvm-args/#r8jvmargs","text":"[jvm]\\ val r8JvmArgs : ListProperty < String > Optional custom jvm arguments to pass into the R8 PrintUses execution. Useful if you want to enable debugging in R8. Example: listOf(\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d)","title":"r8JvmArgs"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/trace-references/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / traceReferences traceReferences \u00b6 [jvm]\\ fun traceReferences (action: Action < TraceReferences >) Allows to enable the new experimental TraceReferences entry-point, and optionally specify additional arguments. See also \u00b6 jvm com.slack.keeper.TraceReferences","title":"Trace references"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/trace-references/#tracereferences","text":"[jvm]\\ fun traceReferences (action: Action < TraceReferences >) Allows to enable the new experimental TraceReferences entry-point, and optionally specify additional arguments.","title":"traceReferences"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/trace-references/#see-also","text":"jvm com.slack.keeper.TraceReferences","title":"See also"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/variant-filter/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperExtension / variantFilter variantFilter \u00b6 [jvm]\\ fun variantFilter (action: Action < VariantFilter >) Applies a variant filter for Android. Note that the variant tested is the app variant, not the test variant. Parameters \u00b6 jvm action the configure action for the VariantFilter","title":"Variant filter"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/variant-filter/#variantfilter","text":"[jvm]\\ fun variantFilter (action: Action < VariantFilter >) Applies a variant filter for Android. Note that the variant tested is the app variant, not the test variant.","title":"variantFilter"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-extension/variant-filter/#parameters","text":"jvm action the configure action for the VariantFilter","title":"Parameters"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperPlugin KeeperPlugin \u00b6 [jvm]\\ class KeeperPlugin : Plugin < Project > A simple Gradle plugin that hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because AGP does not factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . This is optionally configurable via the keeper extension. For example: keeper {\\ automaticR8RepoManagement = false\\ r8JvmArgs = [\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d]\\ } The general logic flow: Create a custom r8 configuration for the R8 dependency. Register two jar tasks. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided [JavaCompile](https://docs.gradle.org/7.1.1/javadoc/index.html/org/gradle/api/tasks/compile/JavaCompile.html) tasks and KotlinCompile tasks if available. Register a [infer${androidTestVariant}UsageForKeeper](../-infer-android-test-keep-rules/index.md) task that plugs the two aforementioned jars into R8's PrintUses or TraceReferences CLI and outputs the inferred proguard rules into a new intermediate .pro file. Finally - the generated file is wired in to Proguard/R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in the Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds. Constructors \u00b6 KeeperPlugin [jvm] fun KeeperPlugin () Functions \u00b6 Name Summary apply [jvm] open override fun apply (project: Project )","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/#keeperplugin","text":"[jvm]\\ class KeeperPlugin : Plugin < Project > A simple Gradle plugin that hooks into Proguard/R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because AGP does not factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed. This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384 . This is optionally configurable via the keeper extension. For example: keeper {\\ automaticR8RepoManagement = false\\ r8JvmArgs = [\u201c-Xdebug\u201d, \u201c-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\u201d]\\ } The general logic flow: Create a custom r8 configuration for the R8 dependency. Register two jar tasks. One for all the classes in its target testedVariant and one for all the classes in the androidTest variant itself. This will use their variant-provided [JavaCompile](https://docs.gradle.org/7.1.1/javadoc/index.html/org/gradle/api/tasks/compile/JavaCompile.html) tasks and KotlinCompile tasks if available. Register a [infer${androidTestVariant}UsageForKeeper](../-infer-android-test-keep-rules/index.md) task that plugs the two aforementioned jars into R8's PrintUses or TraceReferences CLI and outputs the inferred proguard rules into a new intermediate .pro file. Finally - the generated file is wired in to Proguard/R8 via private task APIs and setting their configurationFiles to include our generated one. Appropriate task dependencies (via inputs/outputs, not dependsOn) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK. The tasks themselves take roughly ~20 seconds total extra work in the Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds.","title":"KeeperPlugin"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/#constructors","text":"KeeperPlugin [jvm] fun KeeperPlugin ()","title":"Constructors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/#functions","text":"Name Summary apply [jvm] open override fun apply (project: Project )","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/-keeper-plugin/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperPlugin / KeeperPlugin KeeperPlugin \u00b6 [jvm]\\ fun KeeperPlugin ()","title":" keeper plugin"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/-keeper-plugin/#keeperplugin","text":"[jvm]\\ fun KeeperPlugin ()","title":"KeeperPlugin"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/apply/","text":"// keeper-gradle-plugin / com.slack.keeper / KeeperPlugin / apply apply \u00b6 [jvm]\\ open override fun apply (project: Project )","title":"Apply"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-keeper-plugin/apply/#apply","text":"[jvm]\\ open override fun apply (project: Project )","title":"apply"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/","text":"// keeper-gradle-plugin / com.slack.keeper / TraceReferences TraceReferences \u00b6 [jvm]\\ abstract class TraceReferences @Inject()constructor( objects : ObjectFactory ) Properties \u00b6 Name Summary arguments [jvm] val arguments : ListProperty < String > Optional arguments during the trace-references invocation, only considered when enabled is true.","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/#tracereferences","text":"[jvm]\\ abstract class TraceReferences @Inject()constructor( objects : ObjectFactory )","title":"TraceReferences"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/#properties","text":"Name Summary arguments [jvm] val arguments : ListProperty < String > Optional arguments during the trace-references invocation, only considered when enabled is true.","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/-trace-references/","text":"// keeper-gradle-plugin / com.slack.keeper / TraceReferences / TraceReferences TraceReferences \u00b6 [jvm]\\ @Inject() fun TraceReferences (objects: ObjectFactory )","title":" trace references"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/-trace-references/#tracereferences","text":"[jvm]\\ @Inject() fun TraceReferences (objects: ObjectFactory )","title":"TraceReferences"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/arguments/","text":"// keeper-gradle-plugin / com.slack.keeper / TraceReferences / arguments arguments \u00b6 [jvm]\\ val arguments : ListProperty < String > Optional arguments during the trace-references invocation, only considered when enabled is true. Default value: listOf(\u201c\u2013map-diagnostics:MissingDefinitionsDiagnostic\u201d, \u201cerror\u201d, \u201cinfo\u201d) which is coming from this discussion with the R8 team.","title":"Arguments"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-trace-references/arguments/#arguments","text":"[jvm]\\ val arguments : ListProperty < String > Optional arguments during the trace-references invocation, only considered when enabled is true. Default value: listOf(\u201c\u2013map-diagnostics:MissingDefinitionsDiagnostic\u201d, \u201cerror\u201d, \u201cinfo\u201d) which is coming from this discussion with the R8 team.","title":"arguments"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar VariantClasspathJar \u00b6 [jvm]\\ @ CacheableTask () abstract class VariantClasspathJar : BaseKeeperJarTask A simple cacheable task that creates a jar from a given classpath . Normally these aren\u2019t intended to be cacheable, but in our case it\u2019s fine since the resulting jar is an input of a task and not just a transient operation of another plugin. This uses ZipFlinger under the hood to run the copy operation performantly. Constructors \u00b6 VariantClasspathJar [jvm] fun VariantClasspathJar () Functions \u00b6 Name Summary createJar [jvm] fun createJar () from [jvm] fun from (vararg paths: Any ) Properties \u00b6 Name Summary appJarsFile [jvm] abstract val appJarsFile : RegularFileProperty archiveFile [jvm] abstract val archiveFile : RegularFileProperty classpath [jvm] abstract val classpath : ConfigurableFileCollection","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/#variantclasspathjar","text":"[jvm]\\ @ CacheableTask () abstract class VariantClasspathJar : BaseKeeperJarTask A simple cacheable task that creates a jar from a given classpath . Normally these aren\u2019t intended to be cacheable, but in our case it\u2019s fine since the resulting jar is an input of a task and not just a transient operation of another plugin. This uses ZipFlinger under the hood to run the copy operation performantly.","title":"VariantClasspathJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/#constructors","text":"VariantClasspathJar [jvm] fun VariantClasspathJar ()","title":"Constructors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/#functions","text":"Name Summary createJar [jvm] fun createJar () from [jvm] fun from (vararg paths: Any )","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/#properties","text":"Name Summary appJarsFile [jvm] abstract val appJarsFile : RegularFileProperty archiveFile [jvm] abstract val archiveFile : RegularFileProperty classpath [jvm] abstract val classpath : ConfigurableFileCollection","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/-variant-classpath-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / VariantClasspathJar VariantClasspathJar \u00b6 [jvm]\\ fun VariantClasspathJar ()","title":" variant classpath jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/-variant-classpath-jar/#variantclasspathjar","text":"[jvm]\\ fun VariantClasspathJar ()","title":"VariantClasspathJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/app-jars-file/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / appJarsFile appJarsFile \u00b6 [jvm]\\ abstract val appJarsFile : RegularFileProperty","title":"App jars file"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/app-jars-file/#appjarsfile","text":"[jvm]\\ abstract val appJarsFile : RegularFileProperty","title":"appJarsFile"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/archive-file/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / archiveFile archiveFile \u00b6 [jvm]\\ abstract val archiveFile : RegularFileProperty","title":"Archive file"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/archive-file/#archivefile","text":"[jvm]\\ abstract val archiveFile : RegularFileProperty","title":"archiveFile"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/classpath/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / classpath classpath \u00b6 [jvm]\\ abstract val classpath : ConfigurableFileCollection","title":"Classpath"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/classpath/#classpath","text":"[jvm]\\ abstract val classpath : ConfigurableFileCollection","title":"classpath"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/create-jar/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / createJar createJar \u00b6 [jvm]\\ fun createJar ()","title":"Create jar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/create-jar/#createjar","text":"[jvm]\\ fun createJar ()","title":"createJar"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/from/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantClasspathJar / from from \u00b6 [jvm]\\ fun from (vararg paths: Any )","title":"From"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-classpath-jar/from/#from","text":"[jvm]\\ fun from (vararg paths: Any )","title":"from"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantFilter VariantFilter \u00b6 [jvm]\\ interface VariantFilter Functions \u00b6 Name Summary setIgnore [jvm] abstract fun setIgnore (ignore: Boolean ) Indicate whether or not to ignore this particular variant. Properties \u00b6 Name Summary buildType [jvm] abstract val buildType : BuildType Returns the Build Type. flavors [jvm] abstract val flavors : List Returns the list of flavors, or an empty list. name [jvm] abstract val name : String Returns the unique variant name.","title":"Index"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/#variantfilter","text":"[jvm]\\ interface VariantFilter","title":"VariantFilter"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/#functions","text":"Name Summary setIgnore [jvm] abstract fun setIgnore (ignore: Boolean ) Indicate whether or not to ignore this particular variant.","title":"Functions"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/#properties","text":"Name Summary buildType [jvm] abstract val buildType : BuildType Returns the Build Type. flavors [jvm] abstract val flavors : List Returns the list of flavors, or an empty list. name [jvm] abstract val name : String Returns the unique variant name.","title":"Properties"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/build-type/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantFilter / buildType buildType \u00b6 [jvm]\\ abstract val buildType : BuildType Returns the Build Type.","title":"Build type"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/build-type/#buildtype","text":"[jvm]\\ abstract val buildType : BuildType Returns the Build Type.","title":"buildType"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/flavors/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantFilter / flavors flavors \u00b6 [jvm]\\ abstract val flavors : List Returns the list of flavors, or an empty list.","title":"Flavors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/flavors/#flavors","text":"[jvm]\\ abstract val flavors : List Returns the list of flavors, or an empty list.","title":"flavors"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/name/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantFilter / name name \u00b6 [jvm]\\ abstract val name : String Returns the unique variant name.","title":"Name"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/name/#name","text":"[jvm]\\ abstract val name : String Returns the unique variant name.","title":"name"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/set-ignore/","text":"// keeper-gradle-plugin / com.slack.keeper / VariantFilter / setIgnore setIgnore \u00b6 [jvm]\\ abstract fun setIgnore (ignore: Boolean ) Indicate whether or not to ignore this particular variant. Default is false.","title":"Set ignore"},{"location":"0.x/keeper-gradle-plugin/com.slack.keeper/-variant-filter/set-ignore/#setignore","text":"[jvm]\\ abstract fun setIgnore (ignore: Boolean ) Indicate whether or not to ignore this particular variant. Default is false.","title":"setIgnore"}]}